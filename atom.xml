<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yxq.me</id>
    <title>yxqme</title>
    <updated>2019-10-15T03:07:48.829Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yxq.me"/>
    <link rel="self" href="https://yxq.me/atom.xml"/>
    <subtitle>最渺小的我，有大大的梦</subtitle>
    <logo>https://yxq.me/images/avatar.png</logo>
    <icon>https://yxq.me/favicon.ico</icon>
    <rights>All rights reserved 2019, yxqme</rights>
    <entry>
        <title type="html"><![CDATA[Dockerfile - 指令学习]]></title>
        <id>https://yxq.me/post/dockerfile-zhi-ling-xue-xi</id>
        <link href="https://yxq.me/post/dockerfile-zhi-ling-xue-xi">
        </link>
        <updated>2019-10-15T03:06:05.000Z</updated>
        <content type="html"><![CDATA[<h2 id="copy">COPY</h2>
<p>格式：</p>
<pre><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt;... &lt;目标路径&gt;
COPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]
</code></pre>
<p>示例：</p>
<blockquote>
<p>其通配符规则要满足 Go 的 <a href="https://golang.org/pkg/path/filepath/#Match"><code>filepath.Match</code></a> 规则</p>
<p>还可以加上 <code>--chown=&lt;user&gt;:&lt;group&gt;</code> 选项来改变文件的所属用户及所属组</p>
</blockquote>
<pre><code>COPY package.json /usr/src/app/

COPY hom* /mydir/
COPY hom?.txt /mydir/

COPY --chown=55:mygroup files* /mydir/
COPY --chown=bin files* /mydir/
COPY --chown=1 files* /mydir/
COPY --chown=10:11 files* /mydir/
</code></pre>
<h2 id="add">ADD</h2>
<p><code>ADD</code> 指令和 <code>COPY</code> 的格式和性质基本一致。但是在 <code>COPY</code> 基础上增加了 <code>&lt;源路径&gt;</code> 可以是一个 <code>URL</code> 的功能</p>
<blockquote>
<ul>
<li>
<p>下载后文件权限自动设置为 <code>600</code></p>
</li>
<li>
<p><code>&lt;源路径&gt;</code> 为一个 <code>tar</code> 压缩文件的话，压缩格式为 <code>gzip</code>, <code>bzip2</code> 以及 <code>xz</code> 的情况下，<code>ADD</code> 指令将会自动解压缩这个压缩文件到 <code>&lt;目标路径&gt;</code> 去</p>
</li>
<li>
<p>尽可能的使用 <code>COPY</code>，因为 <code>COPY</code> 的语义很明确，就是复制文件而已，而 <code>ADD</code> 则包含了更复杂的功能，其行为也不一定很清晰。最适合使用 <code>ADD</code> 的场合，就是所提及的需要自动解压缩的场合</p>
</li>
<li>
<p><code>ADD</code> 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢</p>
</li>
</ul>
</blockquote>
<h2 id="cmd">CMD</h2>
<p><code>CMD</code> 指令的格式和 <code>RUN</code> 相似，有两种格式：</p>
<pre><code>CMD &lt;命令&gt; # shell 格式
CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...] # exec 格式
</code></pre>
<blockquote>
<ul>
<li>
<p>Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。<code>CMD</code> 指令就是用于指定默认的容器主进程的启动命令的。</p>
</li>
<li>
<p>一般推荐使用 <code>exec</code> 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 <code>&quot;</code>，而不要使用单引号</p>
</li>
<li>
<p>使用 <code>shell</code> 格式的话，实际的命令会被包装为 <code>sh -c</code> 的参数的形式进行执行，例如 <code>CMD echo $HOME</code> 实际执行中，会变为 <code>CMD [&quot;sh&quot;, &quot;-C&quot;, &quot;echo $HOME&quot;]</code></p>
</li>
<li>
<p>Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 <code>systemd</code> 去启动后台服务，容器内没有后台服务的概念</p>
</li>
</ul>
</blockquote>
<h2 id="entrypoint">ENTRYPOINT</h2>
<p><code>ENTRYPOINT</code> 的格式和 <code>RUN</code> 指令格式一样，分为 <code>exec</code> 格式和 <code>shell</code> 格式。</p>
<p><code>ENTRYPOINT</code> 的目的和 <code>CMD</code> 一样，都是在指定容器启动程序及参数。<code>ENTRYPOINT</code> 在运行时也可以替代，不过比 <code>CMD</code> 要略显繁琐，需要通过 <code>docker run</code> 的参数 <code>--entrypoint</code> 来指定。</p>
<p>当指定了 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的含义就发生了改变，不再是直接的运行其命令，而是将 <code>CMD</code> 的内容作为参数传给 <code>ENTRYPOINT</code> 指令，换句话说实际执行时，将变为：</p>
<pre><code>&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;
</code></pre>
<p>为什么要使用 <code>ENTRYPOINT</code></p>
<ul>
<li>让镜像变成像命令一样使用</li>
<li>应用运行前的准备工作</li>
</ul>
<h2 id="env">ENV</h2>
<p>设置环境变量，格式如下：</p>
<pre><code>ENV &lt;key&gt; &lt;value&gt;
ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...
</code></pre>
<h2 id="arg">ARG</h2>
<p>构建参数和 <code>ENV</code> 的效果一样，都是设置环境变量。所不同的是，<code>ARG</code> 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 <code>ARG</code> 保存密码之类的信息，因为 <code>docker history</code> 还是可以看到所有值的</p>
<pre><code>ARG &lt;参数名&gt;[=&lt;默认值&gt;]
</code></pre>
<h2 id="volume">VOLUME</h2>
<p>定义匿名卷，格式如下：</p>
<pre><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]
VOLUME &lt;路径&gt;
</code></pre>
<blockquote>
<p>事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据</p>
</blockquote>
<h2 id="expose">EXPOSE</h2>
<p>声明端口，格式为：</p>
<pre><code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]
</code></pre>
<p><code>EXPOSE</code> 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务</p>
<p>好处：</p>
<ul>
<li>
<p>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射</p>
</li>
<li>
<p>在运行时使用随机端口映射时，也就是 <code>docker run -P</code> 时，会自动随机映射 <code>EXPOSE</code> 的端口</p>
</li>
</ul>
<blockquote>
<p>要将 <code>EXPOSE</code> 和在运行时使用 <code>-p &lt;宿主端口&gt;:&lt;容器端口&gt;</code> 区分开来。<code>-p</code>，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 <code>EXPOSE</code> 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射</p>
</blockquote>
<h2 id="workdir">WORKDIR</h2>
<p>指定工作目录，格式为：</p>
<pre><code>WORKDIR &lt;工作目录路径&gt;
</code></pre>
<p>使用 <code>WORKDIR</code> 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，<code>WORKDIR</code> 会帮你建立目录</p>
<blockquote>
<p>在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；而在 <code>Dockerfile</code> 中，这两行 <code>RUN</code> 命令的执行环境根本不同，是两个完全不同的容器。因此如果需要改变以后各层的工作目录的位置，那么应该使用 <code>WORKDIR</code> 指令</p>
</blockquote>
<h2 id="user">USER</h2>
<p>指定当前用户，格式为：</p>
<pre><code>USER &lt;用户名&gt;[:&lt;用户组&gt;]
</code></pre>
<p><code>USER</code> 指令和 <code>WORKDIR</code> 相似，都是改变环境状态并影响以后的层。<code>WORKDIR</code> 是改变工作目录，<code>USER</code> 则是改变之后层的执行 <code>RUN</code>, <code>CMD</code> 以及 <code>ENTRYPOINT</code> 这类命令的身份</p>
<p>当然，和 <code>WORKDIR</code> 一样，<code>USER</code> 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换</p>
<blockquote>
<p>如果以 <code>root</code> 执行的脚本，在执行期间希望改变身份，比如希望以某个已经建立好的用户来运行某个服务进程，不要使用 <code>su</code> 或者 <code>sudo</code>，这些都需要比较麻烦的配置，而且在 TTY 缺失的环境下经常出错。建议使用 <a href="https://github.com/tianon/gosu"><code>gosu</code></a></p>
</blockquote>
<h2 id="healthcheck">HEALTHCHECK</h2>
<p>健康检查，格式为：</p>
<pre><code>HEALTHCHECK [选项] CMD &lt;命令&gt; # 设置检查容器健康状况的命令
HEALTHCHECK NONE # 如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令
</code></pre>
<p>命令选项：</p>
<ul>
<li><code>--interval=&lt;间隔&gt;</code>：两次健康检查的间隔，默认为 30 秒；</li>
<li><code>--timeout=&lt;时长&gt;</code>：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；</li>
<li><code>--retries=&lt;次数&gt;</code>：当连续失败指定次数后，则将容器状态视为 <code>unhealthy</code>，默认 3 次。</li>
</ul>
<blockquote>
<ul>
<li>
<p>告诉 Docker 应该如何进行判断容器的状态是否正常</p>
</li>
<li>
<p>和 <code>CMD</code>, <code>ENTRYPOINT</code> 一样，<code>HEALTHCHECK</code> 只可以出现一次，如果写了多个，只有最后一个生效</p>
</li>
<li>
<p>命令的返回值决定了该次健康检查的成功与否：<code>0</code>：成功；<code>1</code>：失败；<code>2</code>：保留，不要使用这个值。</p>
</li>
</ul>
</blockquote>
<p>示例，假设我们有个镜像是个最简单的 Web 服务，我们希望增加健康检查来判断其 Web 服务是否在正常工作，我们可以用 <code>curl</code> 来帮助判断，其 <code>Dockerfile</code> 的 <code>HEALTHCHECK</code> 可以这么写：</p>
<pre><code>FROM nginx
RUN apt-get update &amp;&amp; apt-get install -y curl &amp;&amp; rm -rf /var/lib/apt/lists/*
HEALTHCHECK --interval=5s --timeout=3s \
  CMD curl -fs http://localhost/ || exit 1
</code></pre>
<h2 id="onbuild">ONBUILD</h2>
<p>为他人作嫁衣裳，格式为：</p>
<pre><code>ONBUILD &lt;其它指令&gt;
</code></pre>
<p><code>ONBUILD</code> 是一个特殊的指令，它后面跟的是其它指令，比如 <code>RUN</code>, <code>COPY</code> 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TCP/IP 相关词汇整理]]></title>
        <id>https://yxq.me/post/tcpip-xiang-guan-ci-hui-zheng-li</id>
        <link href="https://yxq.me/post/tcpip-xiang-guan-ci-hui-zheng-li">
        </link>
        <updated>2019-10-12T07:22:59.000Z</updated>
        <content type="html"><![CDATA[<h2 id="分组交换协议">分组交换协议</h2>
<p>指将大数据分割为一个个叫包的较小单位进行传输的方法</p>
<h2 id="osi-参考模型">OSI 参考模型</h2>
<table>
<thead>
<tr>
<th style="text-align:left">层级</th>
<th style="text-align:left">名称</th>
<th style="text-align:left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">应用层</td>
<td style="text-align:left">针对特定应用的协议</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">表示层</td>
<td style="text-align:left">设备固有数据格式和网络标准数据格式的转换</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">会话层</td>
<td style="text-align:left">通信管理。管理传输层以下的分层</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">传输层</td>
<td style="text-align:left">管理两个节点之间的数据传输</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">网络层</td>
<td style="text-align:left">地址管理和路由选择</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left">数据链路层</td>
<td style="text-align:left">互连设备之前传送和识别数据帧</td>
</tr>
<tr>
<td style="text-align:left">7</td>
<td style="text-align:left">物理层</td>
<td style="text-align:left">以 <strong>0</strong> <strong>1</strong> 代表电压的高低、灯光的闪灭。界定连接器和网线的规格</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[群晖 DSM 备注]]></title>
        <id>https://yxq.me/post/qun-hui-dsm-bei-zhu</id>
        <link href="https://yxq.me/post/qun-hui-dsm-bei-zhu">
        </link>
        <updated>2018-08-18T07:44:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="路径">路径</h3>
<pre><code># DDNS 脚本目录
/usr/syno/bin/ddns

# 群晖证书的保存位置
/usr/syno/etc/certificate/

/usr/syno/etc/certificate/_archive/pzvc7R/cert.pem
/usr/syno/etc/certificate/_archive/pzvc7R/privkey.pem
</code></pre>
<h3 id="第三方套件">第三方套件</h3>
<ul>
<li><a href="https://synocommunity.com/">synocommunity</a></li>
<li><a href="http://www.cphub.net">cphub</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ Kong - 分布式 API 网关]]></title>
        <id>https://yxq.me/post/kong-api</id>
        <link href="https://yxq.me/post/kong-api">
        </link>
        <updated>2018-07-11T00:05:39.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>Kong (https://github.com/Kong/kong) 是一个云原生，高效，可扩展的分布式 API 网关。 自 2015 年在 github 开源后，广泛受到关注，目前已收获 1.68w+ 的 star，其核心价值在于高性能和可扩展性。</p>
</blockquote>
<h2 id="数据表迁移">数据表迁移</h2>
<p>针对版本：kong:1.0.0-alpine</p>
<pre><code class="language-bash"> docker run --rm \
     --network=amber_default \
     -e &quot;KONG_DATABASE=postgres&quot; \
     -e &quot;KONG_PG_HOST=kong-database&quot; \
     -e &quot;KONG_PG_USER=yang&quot; \
     -e &quot;KONG_PG_PASSWORD=BMcDXDP_s7_AaMCne&quot; \
     kong:1.0.0-alpine kong migrations bootstrap
</code></pre>
<blockquote>
<p>kong &lt; 0.15 版本 使用 <code>kong migrations up</code> 迁移数据</p>
</blockquote>
<h2 id="服务services">服务（services）</h2>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>默认值</th>
<th>必需</th>
<th>可选值</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>服务名称</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>retries</td>
<td>连接重试次数</td>
<td>5</td>
<td></td>
<td></td>
</tr>
<tr>
<td>protocol</td>
<td>协议</td>
<td>http</td>
<td>Y</td>
<td>http|https</td>
</tr>
<tr>
<td>host</td>
<td>主机地址</td>
<td></td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>port</td>
<td>端口</td>
<td>80</td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>path</td>
<td>路径</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>connect_timeout</td>
<td>连接超时时长（ms）</td>
<td>60000</td>
<td></td>
<td></td>
</tr>
<tr>
<td>write_timeout</td>
<td>写入超时时长（ms）</td>
<td>60000</td>
<td></td>
<td></td>
</tr>
<tr>
<td>read_timeout</td>
<td>读取超时时长（ms）</td>
<td>60000</td>
<td></td>
<td></td>
</tr>
<tr>
<td>url</td>
<td>简写，一次设置 <code>protocol</code>、<code>port</code>和 <code>path</code></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="路由routes">路由（routes）</h2>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>默认值</th>
<th>必需</th>
<th>可选值</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>名称</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>protocols</td>
<td>支持协议</td>
<td>[&quot;http&quot;,&quot;https&quot;]</td>
<td>Y</td>
<td>http|https|tcp|tls...</td>
</tr>
<tr>
<td>methods</td>
<td>支持的方法</td>
<td></td>
<td>-1</td>
<td>GET|POST...</td>
</tr>
<tr>
<td>hosts</td>
<td>主机地址</td>
<td></td>
<td>-1</td>
<td></td>
</tr>
<tr>
<td>paths</td>
<td>路径</td>
<td></td>
<td>-1</td>
<td></td>
</tr>
<tr>
<td>regex_priority</td>
<td>路由权重</td>
<td>0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>strip_path</td>
<td>是否脱掉匹配前缀</td>
<td>true</td>
<td></td>
<td></td>
</tr>
<tr>
<td>preserve_host</td>
<td>是否保护原始请求头里的主机名</td>
<td>true</td>
<td></td>
<td></td>
</tr>
<tr>
<td>snis</td>
<td>SNIs</td>
<td></td>
<td>-2</td>
<td></td>
</tr>
<tr>
<td>sources</td>
<td>来源 IP 列表</td>
<td></td>
<td>-2</td>
<td></td>
</tr>
<tr>
<td>destinations</td>
<td>目的地 IP 列表</td>
<td></td>
<td>-2</td>
<td></td>
</tr>
<tr>
<td>service</td>
<td>所属服务</td>
<td></td>
<td>Y</td>
<td></td>
</tr>
</tbody>
</table>
<blockquote>
<p><code>-1</code> 有一项必须指定</p>
<p><code>-2</code> 当协议类型里，存在 <code>tcp</code> 或者 <code>tls</code> 有一项必须指定</p>
</blockquote>
<h2 id="消费者consumers">消费者（consumers）</h2>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>默认值</th>
<th>必需</th>
<th>可选值</th>
</tr>
</thead>
<tbody>
<tr>
<td>username</td>
<td>用户名</td>
<td></td>
<td>-1</td>
<td></td>
</tr>
<tr>
<td>custom_id</td>
<td>消费者ID</td>
<td></td>
<td>-1</td>
<td></td>
</tr>
</tbody>
</table>
<blockquote>
<p><code>-1</code>  <code>username</code> 或 <code>custom_id</code> 必需存在一个</p>
</blockquote>
<h2 id="插件plugins">插件（plugins）</h2>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>默认值</th>
<th>必需</th>
<th>可选值</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>名称</td>
<td></td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>route</td>
<td>路由</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>service</td>
<td>服务</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>consumer</td>
<td>消费者</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>config</td>
<td>配置</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>run_on</td>
<td>什么时候启动</td>
<td>&quot;first&quot;</td>
<td>Y</td>
<td>first|second|all</td>
</tr>
<tr>
<td>enabled</td>
<td>是否可用</td>
<td>true</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="证书certificates">证书（certificates）</h2>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>默认值</th>
<th>必需</th>
<th>可选值</th>
</tr>
</thead>
<tbody>
<tr>
<td>cert</td>
<td>公开证书</td>
<td></td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>key</td>
<td>私钥</td>
<td></td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>snis</td>
<td>简写，证书对应的主机</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="证书和域名snis">证书和域名（SNIS）</h2>
<blockquote>
<p>证书和域名，一对多关系</p>
</blockquote>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>默认值</th>
<th>必需</th>
<th>可选值</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>名称</td>
<td></td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>certificate</td>
<td>关联证书</td>
<td></td>
<td>Y</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="负载均衡upstreams">负载均衡（upstreams）</h2>
<blockquote>
<p>用于对从多个服务传入请求进行负载均衡</p>
</blockquote>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>默认值</th>
<th>必需</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>主机名称</td>
<td></td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>hash_on</td>
<td>散列</td>
<td>none</td>
<td></td>
<td>none|consumer|ip|header|cookie</td>
</tr>
<tr>
<td>hash_fallback</td>
<td>备用散列</td>
<td>none</td>
<td></td>
<td>none|consumer|ip|header|cookie</td>
</tr>
<tr>
<td>hash_on_header</td>
<td>散列标头名称</td>
<td></td>
<td>-1</td>
<td></td>
</tr>
<tr>
<td>hash_fallback_header</td>
<td>备用散列标头名称</td>
<td></td>
<td>-1</td>
<td></td>
</tr>
<tr>
<td>hash_on_cookie</td>
<td>散列cookie名称</td>
<td></td>
<td>-1</td>
<td></td>
</tr>
<tr>
<td>hash_on_cookie_path</td>
<td>散列Cookie路径</td>
<td></td>
<td>-1</td>
<td></td>
</tr>
<tr>
<td>slots</td>
<td>插槽数</td>
<td>10000</td>
<td></td>
<td>10 - 65536</td>
</tr>
</tbody>
</table>
<p><code>healthchecks.active.</code> 指示主动执行的健康检查配置选项（全部可选）</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>http_path</td>
<td>/</td>
<td>路径</td>
</tr>
<tr>
<td>timeout</td>
<td>1</td>
<td>超时时间（秒）</td>
</tr>
<tr>
<td>https_sni</td>
<td></td>
<td>目标主机的证书</td>
</tr>
<tr>
<td>concurrency</td>
<td>10</td>
<td>同时运行检查的目标数</td>
</tr>
<tr>
<td>type</td>
<td>http</td>
<td>协议类型，可选 tcp | http | https</td>
</tr>
<tr>
<td>https_verify_certificate</td>
<td>true</td>
<td>校验证书的有效性</td>
</tr>
</tbody>
</table>
<p><code>healthchecks.active.healthy.</code> 指示主动执行检查的健康 （全部可选）</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>http_statuses</td>
<td>[200, 302]</td>
<td>状态码</td>
</tr>
<tr>
<td>interval</td>
<td>0</td>
<td>检查间隔（秒），为 <code>0</code> 则不执检查</td>
</tr>
<tr>
<td>successes</td>
<td>0</td>
<td>成功次数</td>
</tr>
</tbody>
</table>
<p><code>healthchecks.active.unhealthy.</code> 指示主动执行检查的不健康 （全部可选）</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>http_statuses</td>
<td>[429, 404, 500, 501, 502, 503, 504, 505]</td>
<td>状态码</td>
</tr>
<tr>
<td>tcp_failures</td>
<td>0</td>
<td>TCP故障数</td>
</tr>
<tr>
<td>timeouts</td>
<td>0</td>
<td>超时次数</td>
</tr>
<tr>
<td>http_failures</td>
<td>0</td>
<td>HTTP故障数</td>
</tr>
<tr>
<td>interval</td>
<td>0</td>
<td>检查间隔（秒），为 <code>0</code> 则不执检查</td>
</tr>
</tbody>
</table>
<p><code>healthchecks.passive.</code> 指示被动执行检查配置选项（全部可选）</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>type</td>
<td>http</td>
<td>协议类型，可选 tcp | http | https</td>
</tr>
</tbody>
</table>
<p><code>healthchecks.passive.healthy.</code> 指示被动执行检查健康 （全部可选）</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>successes</td>
<td>0</td>
<td>成功次数</td>
</tr>
<tr>
<td>http_statuses</td>
<td>[200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 305, 306, 307, 308]</td>
<td>状态码</td>
</tr>
</tbody>
</table>
<p><code>healthchecks.passive.unhealthy.</code> 指示被动执行检查不健康 （全部可选）</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>http_statuses</td>
<td>[429, 500, 503]</td>
<td>状态码</td>
</tr>
<tr>
<td>tcp_failures</td>
<td>0</td>
<td>TCP故障数</td>
</tr>
<tr>
<td>timeouts</td>
<td>0</td>
<td>超时次数</td>
</tr>
<tr>
<td>http_failures</td>
<td>0</td>
<td>HTTP故障数</td>
</tr>
</tbody>
</table>
<h2 id="目标实例">目标实例</h2>
<blockquote>
<p>真实的后端目标实例</p>
</blockquote>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>默认值</th>
<th>必需</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>target</td>
<td>目标地址</td>
<td></td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>weight</td>
<td>负载权重</td>
<td>100</td>
<td>Y</td>
<td>0 - 1000</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[typescript 编译选项]]></title>
        <id>https://yxq.me/post/typescript-bian-yi-xuan-xiang</id>
        <link href="https://yxq.me/post/typescript-bian-yi-xuan-xiang">
        </link>
        <updated>2018-06-01T03:38:04.000Z</updated>
        <content type="html"><![CDATA[<pre><code>{
  &quot;compilerOptions&quot;: {

    /* 基本选项 */
    &quot;target&quot;: &quot;es5&quot;,                       // 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'
    &quot;module&quot;: &quot;commonjs&quot;,                  // 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'
    &quot;lib&quot;: [],                             // 指定要包含在编译中的库文件
    &quot;allowJs&quot;: true,                       // 允许编译 javascript 文件
    &quot;checkJs&quot;: true,                       // 报告 javascript 文件中的错误
    &quot;jsx&quot;: &quot;preserve&quot;,                     // 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'
    &quot;declaration&quot;: true,                   // 生成相应的 '.d.ts' 文件
    &quot;sourceMap&quot;: true,                     // 生成相应的 '.map' 文件
    &quot;outFile&quot;: &quot;./&quot;,                       // 将输出文件合并为一个文件
    &quot;outDir&quot;: &quot;./&quot;,                        // 指定输出目录
    &quot;rootDir&quot;: &quot;./&quot;,                       // 用来控制输出目录结构 --outDir.
    &quot;removeComments&quot;: true,                // 删除编译后的所有的注释
    &quot;noEmit&quot;: true,                        // 不生成输出文件
    &quot;importHelpers&quot;: true,                 // 从 tslib 导入辅助工具函数
    &quot;isolatedModules&quot;: true,               // 将每个文件做为单独的模块 （与 'ts.transpileModule' 类似）.

    /* 严格的类型检查选项 */
    &quot;strict&quot;: true,                        // 启用所有严格类型检查选项
    &quot;noImplicitAny&quot;: true,                 // 在表达式和声明上有隐含的 any类型时报错
    &quot;strictNullChecks&quot;: true,              // 启用严格的 null 检查
    &quot;noImplicitThis&quot;: true,                // 当 this 表达式值为 any 类型的时候，生成一个错误
    &quot;alwaysStrict&quot;: true,                  // 以严格模式检查每个模块，并在每个文件里加入 'use strict'

    /* 额外的检查 */
    &quot;noUnusedLocals&quot;: true,                // 有未使用的变量时，抛出错误
    &quot;noUnusedParameters&quot;: true,            // 有未使用的参数时，抛出错误
    &quot;noImplicitReturns&quot;: true,             // 并不是所有函数里的代码都有返回值时，抛出错误
    &quot;noFallthroughCasesInSwitch&quot;: true,    // 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）

    /* 模块解析选项 */
    &quot;moduleResolution&quot;: &quot;node&quot;,            // 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)
    &quot;baseUrl&quot;: &quot;./&quot;,                       // 用于解析非相对模块名称的基目录
    &quot;paths&quot;: {},                           // 模块名到基于 baseUrl 的路径映射的列表
    &quot;rootDirs&quot;: [],                        // 根文件夹列表，其组合内容表示项目运行时的结构内容
    &quot;typeRoots&quot;: [],                       // 包含类型声明的文件列表
    &quot;types&quot;: [],                           // 需要包含的类型声明文件名列表
    &quot;allowSyntheticDefaultImports&quot;: true,  // 允许从没有设置默认导出的模块中默认导入。

    /* Source Map Options */
    &quot;sourceRoot&quot;: &quot;./&quot;,                    // 指定调试器应该找到 TypeScript 文件而不是源文件的位置
    &quot;mapRoot&quot;: &quot;./&quot;,                       // 指定调试器应该找到映射文件而不是生成文件的位置
    &quot;inlineSourceMap&quot;: true,               // 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件
    &quot;inlineSources&quot;: true,                 // 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性

    /* 其他选项 */
    &quot;experimentalDecorators&quot;: true,        // 启用装饰器
    &quot;emitDecoratorMetadata&quot;: true          // 为装饰器提供元数据的支持
  }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[docker - 概念]]></title>
        <id>https://yxq.me/post/docker-gai-nian</id>
        <link href="https://yxq.me/post/docker-gai-nian">
        </link>
        <updated>2018-04-09T10:45:16.000Z</updated>
        <content type="html"><![CDATA[<h2 id="架构">架构</h2>
<h3 id="传统虚拟机">传统虚拟机</h3>
<pre><code class="language-mermaid">graph LR
    A1[APP1] --&gt; L1[bin/libs]
    L1 --&gt; VO1[Virtual OS]
    
    VO1 --&gt; H[Hypervisior]
    
    A2[APP2] --&gt; L2[bin/libs]
    L2 --&gt; VO2[Virtual OS]
    
    VO2 --&gt; H[Hypervisior]
    
    H[Hypervisior] --&gt; O[OS]
    O --&gt; S[Server]
</code></pre>
<h3 id="docker">docker</h3>
<pre><code class="language-mermaid">graph LR
    A1[APP1] --&gt; L1[bin/libs]
    L1 --&gt; D[Docker]
    
    A2[APP2] --&gt; L2[bin/libs]
    L2 --&gt; D
    
    D --&gt; O[OS]
    O --&gt; S[Server]
</code></pre>
<h3 id="why">why</h3>
<ul>
<li>更高效的利用系统资源</li>
<li>更快速的启动时间</li>
<li>一致的运行环境</li>
<li>持续交付和部署</li>
<li>更轻松的迁移</li>
<li>更轻松的维护和扩展</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">特性</th>
<th style="text-align:left">容器</th>
<th style="text-align:left">虚拟机</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">启动</td>
<td style="text-align:left">秒级</td>
<td style="text-align:left">分钟级</td>
</tr>
<tr>
<td style="text-align:left">硬盘使用</td>
<td style="text-align:left">一般为 <code>MB</code></td>
<td style="text-align:left">一般为 <code>GB</code></td>
</tr>
<tr>
<td style="text-align:left">性能</td>
<td style="text-align:left">接近原生</td>
<td style="text-align:left">弱于</td>
</tr>
<tr>
<td style="text-align:left">系统支持量</td>
<td style="text-align:left">单机支持上千个容器</td>
<td style="text-align:left">一般几十个</td>
</tr>
</tbody>
</table>
<h2 id="基本概念">基本概念</h2>
<ul>
<li>镜像（Image）</li>
<li>容器（Container）</li>
<li>仓库（Repository）</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Golang - 基础入门]]></title>
        <id>https://yxq.me/post/go-ji-chu</id>
        <link href="https://yxq.me/post/go-ji-chu">
        </link>
        <updated>2018-02-08T06:14:58.000Z</updated>
        <content type="html"><![CDATA[<h2 id="gopath">GOPATH</h2>
<p><strong>go</strong> 命令依赖一个重要的环境变量：<strong>$GOPATH</strong></p>
<ul>
<li><strong>src</strong> 存放源代码（比如：<strong>.go</strong> <strong>.c</strong> <strong>.h</strong> <strong>.s</strong> 等）</li>
<li><strong>pkg</strong> 编译后生成的文件（比如：<strong>.a</strong>）</li>
<li><strong>bin</strong> 编译后生成的可执行文件</li>
</ul>
<h2 id="定义变量">定义变量</h2>
<pre><code>var variableName type
// 定义三个类型都是 type 的变量
var vname1, vname2, vname3 type
// 定义常量
const constantName = value
// 初始化 variableName 的变量为 value 值，类型是 type
// :=这个符号直接取代了var和type,这种形式叫做简短声明。不过它有一个限制，那就是它只能用在函数内部
vname1, vname2, vname3 := v1, v2, v3
// _（下划线）是个特殊的变量名，任何赋予它的值都会被丢弃
_,b := 34, 35
</code></pre>
<h2 id="布尔">布尔</h2>
<p>未指定，默认为 <code>false</code></p>
<h2 id="数字">数字</h2>
<table>
<thead>
<tr>
<th>类型</th>
<th>范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>int</td>
<td>取决于编译器，目前等于int32，可能会变成int64</td>
</tr>
<tr>
<td>uint</td>
<td>取决于编译器，目前等于uint32，可能会变成uint64</td>
</tr>
<tr>
<td>uint8</td>
<td>0~255</td>
</tr>
<tr>
<td>uint16</td>
<td>0~65535</td>
</tr>
<tr>
<td>uint32</td>
<td>0~4294967295</td>
</tr>
<tr>
<td>uint64</td>
<td>0~18446744073709551615</td>
</tr>
<tr>
<td>int8</td>
<td>-128~127</td>
</tr>
<tr>
<td>int16</td>
<td>-32768~32767</td>
</tr>
<tr>
<td>int32</td>
<td>-2147483648~2147483647</td>
</tr>
<tr>
<td>int64</td>
<td>-9223372036854775808~9223372036854775807</td>
</tr>
<tr>
<td>float32</td>
<td>IEEE-754 32位浮点型数</td>
</tr>
<tr>
<td>float64</td>
<td>IEEE-754 64位浮点型数</td>
</tr>
<tr>
<td>complex64</td>
<td>32 位实数和虚数</td>
</tr>
<tr>
<td>complex128</td>
<td>64 位实数和虚数</td>
</tr>
<tr>
<td>byte</td>
<td>uint8别名</td>
</tr>
<tr>
<td>rune</td>
<td>int32别名</td>
</tr>
</tbody>
</table>
<h2 id="字符串不可变但是可以进行切片">字符串(不可变，但是可以进行切片)</h2>
<pre><code>s := &quot;hello&quot;
s = &quot;c&quot; + s[1:] // 字符串虽不能更改，但可进行切片操作 使用+操作符来连接两个字符串
</code></pre>
<h2 id="错误类型">错误类型</h2>
<pre><code>err := errors.New(&quot;emit macho dwarf: elf header corrupted&quot;)
if err != nil {
    fmt.Print(err)
}
</code></pre>
<h2 id="关键字-iota">关键字 iota</h2>
<p>用来声明 <strong>enum</strong> 的时候采用，它默认开始值是 <strong>0</strong>，每调用一次加 <strong>1</strong></p>
<pre><code>const(
    x = iota  // x == 0
    y = iota  // y == 1
    z = iota  // z == 2
    w  // 常量声明省略值时，默认和之前一个值的字面相同。这里隐式地说w = iota，因此w == 3。其实上面y和z可同样不用&quot;= iota&quot;
)

const v = iota // 每遇到一个const关键字，iota就会重置，此时v == 0 

const(
  e, f, g = iota, iota, iota //e=0,f=0,g=0 iota在同一行值相同
)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[群晖 DSM 使用密钥登录]]></title>
        <id>https://yxq.me/post/qun-hui-dsm-shi-yong-mi-yao-ti-dai-mi-ma-deng-lu</id>
        <link href="https://yxq.me/post/qun-hui-dsm-shi-yong-mi-yao-ti-dai-mi-ma-deng-lu">
        </link>
        <updated>2017-07-03T06:20:51.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-设置里打开家目录服务">1. 设置里打开家目录服务</h2>
<pre><code class="language-mermaid">graph LR
    A[用户账号]--&gt;B[高级设置]
    B[高级设置]--&gt;C[家目录]
</code></pre>
<h2 id="2-打开-ssh-功能">2. 打开 <code>SSH</code> 功能</h2>
<pre><code class="language-mermaid">graph LR
    A[终端机和SNMP]--&gt;B[终端机]
    B[终端机]--&gt;C[启动 SSH 功能]
</code></pre>
<h2 id="3-修复家目录相关文件夹权限">3. 修复家目录相关文件夹权限</h2>
<blockquote>
<p>用户家目录权限只能允许用户自己可写</p>
</blockquote>
<pre><code class="language-bash">sudo chmod 755 [target]

chmod 700 ~/.ssh

chmod 600 ~/.ssh/authorized_keys
</code></pre>
<p>复制公钥到 <code>authorized_keys</code></p>
<pre><code>ssh-copy-id -i ~/.ssh/id_rsa.pub [target]
</code></pre>
<h2 id="4-设置-ssh-配置">4. 设置 SSH 配置</h2>
<pre><code class="language-bash">sudo vi /etc/ssh/sshd_config
</code></pre>
<p>修改配置</p>
<pre><code># 去掉注释，打开下面三个配置
#PubkeyAuthentication yes
#AuthorizedKeyFiles .ssh/authorized_keys
#ChallengeResponseAuthentication no

# 可选，禁用密码登录[一定要确定可以SSH登录后在去掉这个，否则以后就登录不了]
PasswordAuthentication no
</code></pre>
<p>重启 SSH 服务</p>
<pre><code>sudo synoservicectl --restart sshd
</code></pre>
<p>配置快速连接 <code>ssh/config</code></p>
<pre><code>Host nas
    IdentityFile /Users/yang/.ssh/id_rsa
    Port 22
    User yang
    Hostname nas.xl-inc.cn
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[读写分离架构设计]]></title>
        <id>https://yxq.me/post/yi-ge-ji-chu-jia-gou</id>
        <link href="https://yxq.me/post/yi-ge-ji-chu-jia-gou">
        </link>
        <updated>2017-06-14T03:32:54.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-mermaid">graph LR
1[Client]
	1 --&gt; 2[DNS]
	1 --&gt; 3[CDN]
	1 --&gt; 4(Kongs) 
	
  4 --&gt; 5(Write Services)
  4 --&gt; 6(Read Services)
  
  5 --&gt; 9(redis)
  6 --&gt; 9(redis)
  
  5 --&gt; 7(SQL Write Master-Slave)
  6 --&gt; 8(SQL Read Replicas)
  
  7 -.- 8
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CentOS 限制登录连接]]></title>
        <id>https://yxq.me/post/centos-xian-zhi-deng-lu-lian-jie</id>
        <link href="https://yxq.me/post/centos-xian-zhi-deng-lu-lian-jie">
        </link>
        <updated>2016-10-20T06:20:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1禁用-root-登陆">1.禁用 root 登陆</h2>
<pre><code class="language-bash">vi /etc/ssh/sshd_config

# PermitRootLogin yes // 改为 no 禁用root登陆

service sshd restart
</code></pre>
<h2 id="2锁定-ssh-失败的登录尝试">2.锁定 ssh 失败的登录尝试</h2>
<p>pam_tally2 模块</p>
<p>参数:</p>
<ul>
<li>file=/var/log/tallylog 默认的日志文件是用来保持登录计数。</li>
<li>deny=3 拒绝后，3次尝试访问和锁定用户。</li>
<li>even_deny_root  政策也适用于root用户。</li>
<li>unlock_time=1200 帐户将被锁定，直到20分钟 。 （如果要永久锁定，直到手动解锁，请删除此参数。）</li>
</ul>
<pre><code class="language-bash"># 配置文件来配置的登录尝试的访问次数
/etc/pam.d/password-auth

# 验证部分
auth        required      pam_tally2.so  file=/var/log/tallylog deny=3 even_deny_root unlock_time=1200

# 账号部分
account     required      pam_tally2.so

# 验证或检查用户尝试的计数器
pam_tally2 --user=root

# 重置或解锁用户帐户以再次启用访问
pam_tally2 --user=root --reset
</code></pre>
<h2 id="3利用-iptables-设置防火墙">3.利用 iptables 设置防火墙</h2>
<p>// todo</p>
]]></content>
    </entry>
</feed>